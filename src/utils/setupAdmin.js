import { 
  getUserProfile, 
  setUserProfile, 
  USER_ROLES, 
  getDefaultPermissions 
} from '../services/firebase';
import { adminConfig } from '../config/firebase-config';

/**
 * Configura o primeiro administrador do sistema
 * Esta fun√ß√£o deve ser chamada apenas uma vez, durante a configura√ß√£o inicial
 * 
 * @param {Object} userAuth - Dados de autentica√ß√£o do usu√°rio Firebase
 * @returns {Promise<boolean>} Se o usu√°rio foi configurado como admin
 */
export const setupFirstAdmin = async (userAuth) => {
  try {
    // Verifica se √© o email configurado como admin
    if (!adminConfig.adminEmail || userAuth.email !== adminConfig.adminEmail) {
      return false;
    }

    // Verifica se o usu√°rio j√° existe no sistema
    let userProfile = await getUserProfile(userAuth.uid);
    
    // Se o usu√°rio n√£o existe, cria o perfil
    if (!userProfile) {
      const adminData = {
        email: userAuth.email,
        name: userAuth.displayName || 'Administrador',
        firstName: userAuth.displayName?.split(' ')[0] || 'Admin',
        lastName: userAuth.displayName?.split(' ').slice(1).join(' ') || 'Sistema',
        role: USER_ROLES.ADMIN,
        permissions: getDefaultPermissions(USER_ROLES.ADMIN),
        isDriver: false,
        setupAsFirstAdmin: true,
        firstAdminSetupAt: new Date()
      };

      await setUserProfile(userAuth.uid, adminData);
      
      console.log('‚úÖ Primeiro administrador configurado:', userAuth.email);
      return true;
    }
    
    // Se o usu√°rio existe mas n√£o √© admin, promove para admin
    if (userProfile.role !== USER_ROLES.ADMIN) {
      // Atualiza o perfil existente para admin
      const updatedData = {
        ...userProfile,
        role: USER_ROLES.ADMIN,
        permissions: getDefaultPermissions(USER_ROLES.ADMIN),
        promotedToFirstAdmin: true,
        firstAdminPromotionAt: new Date(),
        updatedAt: new Date()
      };

      await setUserProfile(userAuth.uid, updatedData);
      
      console.log('‚úÖ Usu√°rio existente promovido a primeiro administrador:', userAuth.email);
      return true;
    }

    // Se j√° √© admin, apenas confirma
    console.log('‚ÑπÔ∏è Usu√°rio j√° √© administrador:', userAuth.email);
    return true;

  } catch (error) {
    console.error('‚ùå Erro ao configurar primeiro administrador:', error);
    throw new Error('N√£o foi poss√≠vel configurar o administrador: ' + error.message);
  }
};

/**
 * Verifica se o sistema j√° tem administradores configurados
 * Esta fun√ß√£o pode ser usada para determinar se √© necess√°rio mostrar
 * um setup inicial ou n√£o
 * 
 * @param {Object} userAuth - Dados de autentica√ß√£o do usu√°rio atual
 * @returns {Promise<boolean>} Se o sistema precisa de configura√ß√£o inicial
 */
export const needsAdminSetup = async (userAuth) => {
  try {
    // Se n√£o h√° email de admin configurado, n√£o precisa de setup
    if (!adminConfig.adminEmail) {
      return false;
    }

    // Se o usu√°rio atual n√£o √© o email configurado como admin
    if (userAuth.email !== adminConfig.adminEmail) {
      return false;
    }

    // Verifica se o usu√°rio j√° est√° configurado como admin
    const userProfile = await getUserProfile(userAuth.uid);
    
    return !userProfile || userProfile.role !== USER_ROLES.ADMIN;
  } catch (error) {
    console.error('Erro ao verificar necessidade de setup admin:', error);
    return false;
  }
};

/**
 * Inicializa√ß√£o autom√°tica do primeiro admin durante o login
 * Esta fun√ß√£o deve ser chamada no processo de autentica√ß√£o
 * 
 * @param {Object} userAuth - Dados de autentica√ß√£o do usu√°rio
 * @returns {Promise<Object>} Perfil do usu√°rio (atualizado se necess√°rio)
 */
export const autoSetupAdminOnLogin = async (userAuth) => {
  try {
    // Tenta configurar como admin se necess√°rio
    const wasSetupAsAdmin = await setupFirstAdmin(userAuth);
    
    // Retorna o perfil atual (pode ter sido atualizado)
    const userProfile = await getUserProfile(userAuth.uid);
    
    if (wasSetupAsAdmin) {
      console.log('üîê Administrador configurado automaticamente durante login');
    }
    
    return userProfile;
  } catch (error) {
    console.error('Erro durante auto-setup de admin:', error);
    // Em caso de erro, ainda tenta retornar o perfil
    try {
      return await getUserProfile(userAuth.uid);
    } catch {
      return null;
    }
  }
};

export default {
  setupFirstAdmin,
  needsAdminSetup,
  autoSetupAdminOnLogin
};